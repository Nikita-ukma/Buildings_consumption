import pandas as pd
import numpy as np
import xgboost as xgb
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import mean_absolute_error

# === 1. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö ===
print("üîπ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...")
df = pd.read_csv("data/power-laws-forecasting-energy-consumption-training-data.csv", sep=';', parse_dates=["Timestamp"])
metadata = pd.read_csv("data/power-laws-forecasting-energy-consumption-metadata.csv", sep=';')
weather = pd.read_csv("data/power-laws-forecasting-energy-consumption-weather.csv", sep=';', parse_dates=["Timestamp"])
holidays = pd.read_csv("data/power-laws-forecasting-energy-consumption-holidays.csv", sep=';', parse_dates=["Date"])

# === 2. –ß–∞—Å–æ–≤—ñ —Ñ—ñ—á—ñ ===
df["Hour"] = df["Timestamp"].dt.hour
df["DayOfWeek"] = df["Timestamp"].dt.dayofweek  # (0 - –ø–æ–Ω–µ–¥—ñ–ª–æ–∫, 6 - –Ω–µ–¥—ñ–ª—è)
df["Month"] = df["Timestamp"].dt.month
df["Year"] = df["Timestamp"].dt.year
df["Date"] = df["Timestamp"].dt.date  # –î–ª—è –æ–±'—î–¥–Ω–∞–Ω–Ω—è –∑—ñ —Å–≤—è—Ç–∞–º–∏

# –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—ñ—á—ñ
df["IsWeekend"] = df["DayOfWeek"].apply(lambda x: 1 if x >= 5 else 0)  # –í–∏—Ö—ñ–¥–Ω–∏–π –¥–µ–Ω—å

# === 3. –î–æ–¥–∞–≤–∞–Ω–Ω—è –º–µ—Ç–∞-–¥–∞–Ω–∏—Ö –ø—Ä–æ –±—É–¥—ñ–≤–ª—ñ ===
df = df.merge(metadata, on="SiteId", how="left")

# === 4. –û–±'—î–¥–Ω–∞–Ω–Ω—è –∑ –ø–æ–≥–æ–¥–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ ===
weather = weather.sort_values(["SiteId", "Timestamp", "Distance"]).drop_duplicates(["SiteId", "Timestamp"])
df = df.merge(weather, on=["SiteId", "Timestamp"], how="left")

# === 5. –î–æ–¥–∞–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å–≤—è—Ç–∞ ===
holidays["HolidayFlag"] = 1

# –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–ø—ñ–≤ –¥–∞–Ω–∏—Ö –¥–ª—è –æ–±'—î–¥–Ω–∞–Ω–Ω—è
df["Date"] = pd.to_datetime(df["Date"])
holidays["Date"] = pd.to_datetime(holidays["Date"])

# –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–≤—è—Ç–∞
df = df.merge(holidays[["Date", "SiteId", "HolidayFlag"]], on=["Date", "SiteId"], how="left")

# –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è NaN –∑–Ω–∞—á–µ–Ω—å (–¥–µ –Ω–µ–º–∞—î —Å–≤—è—Ç–∞ ‚Üí —Å—Ç–∞–≤–∏–º–æ 0)
df["HolidayFlag"] = df["HolidayFlag"].fillna(0)

# === 6. –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ 2017 —Ä—ñ–∫ (–∞–±–æ –≤–∑—è—Ç–∏ —á–∞—Å—Ç–∏–Ω—É –≤–∏–±—ñ—Ä–∫–∏) ===
df = df[df["Year"] == 2017]  # –ú–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞ df.sample(frac=0.5, random_state=42)

# === 7. –í–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö —Å—Ç–æ–≤–ø—Ü—ñ–≤ ===
df.drop(columns=["Timestamp", "Date", "Year"], inplace=True)

# === 8. –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å ===
df.fillna(df.median(), inplace=True)

# === 9. –†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ –Ω–∞–≤—á–∞–ª—å–Ω—É —Ç–∞ —Ç–µ—Å—Ç–æ–≤—É –≤–∏–±—ñ—Ä–∫–∏ ===
X = df.drop(columns=["Value"])  # –§—ñ—á—ñ
y = df["Value"]  # –¶—ñ–ª—å–æ–≤–∞ –∑–º—ñ–Ω–Ω–∞ (—Å–ø–æ–∂–∏–≤–∞–Ω–Ω—è)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# === 10. –¢—é–Ω—ñ–Ω–≥ –≥—ñ–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ XGBoost ===
print("üöÄ –ù–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ XGBoost...")
model = xgb.XGBRegressor(random_state=42)

param_grid = {
    'n_estimators': [100, 200, 300],
    'max_depth': [3, 6, 9],
    'learning_rate': [0.01, 0.05, 0.1],
}

grid_search = GridSearchCV(estimator=model, param_grid=param_grid, cv=3, scoring='neg_mean_absolute_error')
grid_search.fit(X_train, y_train)
print("–ù–∞–π–∫—Ä–∞—â—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:", grid_search.best_params_)

# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
best_model = grid_search.best_estimator_

# === 11. –û—Ü—ñ–Ω–∫–∞ –º–æ–¥–µ–ª—ñ ===
y_pred = best_model.predict(X_test)
mae = mean_absolute_error(y_test, y_pred)
print(f"üìâ Mean Absolute Error (MAE): {mae:.2f}")

mean_value = df["Value"].mean()
print(f"–°–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è –µ–Ω–µ—Ä–≥–æ–≤–∏—Ç—Ä–∞—Ç: {mean_value:.2f}")

relative_error = (mae / mean_value) * 100
print(f"–í—ñ–¥–Ω–æ—Å–Ω–∞ –ø–æ—Ö–∏–±–∫–∞: {relative_error:.2f}%")

# === 12. –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–∞–∂–ª–∏–≤–æ—Å—Ç—ñ —Ñ—ñ—á ===
plt.figure(figsize=(10, 5))
sns.barplot(x=best_model.feature_importances_, y=X.columns)
plt.xlabel("–í–∞–∂–ª–∏–≤—ñ—Å—Ç—å —Ñ—ñ—á")
plt.ylabel("–§—ñ—á—ñ")
plt.title("–í–∞–∂–ª–∏–≤—ñ—Å—Ç—å —Ñ—ñ—á –¥–ª—è XGBoost")
plt.show()