import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from statsmodels.tsa.seasonal import seasonal_decompose

# === 1. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö ===
print("üîπ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...")
df = pd.read_csv("data/monthly_consumption.csv", sep=',', parse_dates=["Month"])

# === 2. –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è Timestamp —É —Ñ–æ—Ä–º–∞—Ç YYYY-MM ===
df["Month"] = df["Month"].dt.to_period("M")  # –§–æ—Ä–º–∞—Ç YYYY-MM

# === 3. –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –∑–∞ –º—ñ—Å—è—Ü–µ–º —Ç–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è ===
monthly_avg = df.groupby("Month")["value"].mean().reset_index()
monthly_avg.rename(columns={"value": "avg_value"}, inplace=True)

# –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ Month –Ω–∞–∑–∞–¥ —É —Ä—è–¥–æ–∫ (–¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ)
monthly_avg["Month"] = monthly_avg["Month"].astype(str)

# === 4. –ü–æ–±—É–¥–æ–≤–∞ —Ç—Ä–µ–Ω–¥—É ===
# –õ—ñ–Ω—ñ–π–Ω–∞ —Ä–µ–≥—Ä–µ—Å—ñ—è –¥–ª—è —Å–µ—Ä–µ–¥–Ω—ñ—Ö –∑–Ω–∞—á–µ–Ω—å
X = np.arange(len(monthly_avg)).reshape(-1, 1)
y = monthly_avg["avg_value"].values
model = LinearRegression()
model.fit(X, y)
trend = model.predict(X)

# –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç—Ä–µ–Ω–¥—É
plt.figure(figsize=(10, 6))
plt.plot(monthly_avg["Month"], y, label="–°–µ—Ä–µ–¥–Ω—î –µ–Ω–µ—Ä–≥–æ—Å–ø–æ–∂–∏–≤–∞–Ω–Ω—è")
plt.plot(monthly_avg["Month"], trend, label="–¢—Ä–µ–Ω–¥", color="red")
plt.title("–ó–∞–≥–∞–ª—å–Ω–∏–π —Ç—Ä–µ–Ω–¥ –µ–Ω–µ—Ä–≥–æ—Å–ø–æ–∂–∏–≤–∞–Ω–Ω—è (—Å–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –º—ñ—Å—è—Ü—å)")
plt.xlabel("–ú—ñ—Å—è—Ü—å")
plt.ylabel("–ï–Ω–µ—Ä–≥–æ—Å–ø–æ–∂–∏–≤–∞–Ω–Ω—è")
plt.xticks(rotation=45)  # –ü–æ–≤–æ—Ä–æ—Ç –ø—ñ–¥–ø–∏—Å—ñ–≤ –Ω–∞ –æ—Å—ñ X –¥–ª—è –∫—Ä–∞—â–æ—ó —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ
plt.legend()
plt.show()

# === 5. –î–µ–∫–æ–º–ø–æ–∑–∏—Ü—ñ—è —á–∞—Å–æ–≤–æ–≥–æ —Ä—è–¥—É ===
# –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –¥–∞–Ω—ñ —É —á–∞—Å–æ–≤–∏–π —Ä—è–¥ (–¥–ª—è statsmodels)
monthly_avg.set_index("Month", inplace=True)
monthly_avg.index = pd.to_datetime(monthly_avg.index)

# –í–∏–∫–æ–Ω—É—î–º–æ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü—ñ—é (–∞–¥–∏—Ç–∏–≤–Ω–∞ –º–æ–¥–µ–ª—å)
decomposition = seasonal_decompose(monthly_avg["avg_value"], model='additive', period=12)  # period=12 –¥–ª—è –º—ñ—Å—è—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö

# –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü—ñ—ó
plt.figure(figsize=(12, 8))

# –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ä—è–¥
plt.subplot(411)
plt.plot(decomposition.observed, label="–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ä—è–¥")
plt.legend()

# –¢—Ä–µ–Ω–¥
plt.subplot(412)
plt.plot(decomposition.trend, label="–¢—Ä–µ–Ω–¥")
plt.legend()

# –°–µ–∑–æ–Ω–Ω—ñ—Å—Ç—å
plt.subplot(413)
plt.plot(decomposition.seasonal, label="–°–µ–∑–æ–Ω–Ω—ñ—Å—Ç—å")
plt.legend()

# –ó–∞–ª–∏—à–∫–∏ (—à—É–º)
plt.subplot(414)
plt.plot(decomposition.resid, label="–ó–∞–ª–∏—à–∫–∏ (—à—É–º)")
plt.legend()

plt.tight_layout()
plt.show()

# === 6. –ê–Ω–∞–ª—ñ–∑ —à—É–º—É ===
# –°—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∑–∞–ª–∏—à–∫—ñ–≤
residuals = decomposition.resid.dropna()  # –í–∏–¥–∞–ª—è—î–º–æ NaN
print("\n–°—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∑–∞–ª–∏—à–∫—ñ–≤ (—à—É–º—É):")
print(f"–°–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è: {residuals.mean()}")
print(f"–î–∏—Å–ø–µ—Ä—Å—ñ—è: {residuals.var()}")
print(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: {residuals.std()}")

# –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É –∑–∞–ª–∏—à–∫—ñ–≤
plt.figure(figsize=(10, 6))
plt.hist(residuals, bins=30, edgecolor='black', alpha=0.7)
plt.title("–†–æ–∑–ø–æ–¥—ñ–ª –∑–∞–ª–∏—à–∫—ñ–≤ (—à—É–º—É)")
plt.xlabel("–ó–∞–ª–∏—à–∫–∏")
plt.ylabel("–ß–∞—Å—Ç–æ—Ç–∞")
plt.show()

from scipy.signal import periodogram

# –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
frequencies, spectrum = periodogram(monthly_avg["avg_value"])
plt.figure(figsize=(10, 6))
plt.plot(frequencies, spectrum)
plt.title("–°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–∞ —â—ñ–ª—å–Ω—ñ—Å—Ç—å")
plt.xlabel("–ß–∞—Å—Ç–æ—Ç–∞")
plt.ylabel("–Ü–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å")
plt.show()