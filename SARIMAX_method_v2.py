import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.preprocessing import StandardScaler
from statsmodels.tsa.stattools import adfuller
from sklearn.metrics import mean_absolute_error, mean_squared_error

# üîπ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
df = pd.read_csv("residential_energy_normalized.csv")
df['Timestamp'] = pd.to_datetime(df['Timestamp'])
df.set_index('Timestamp', inplace=True)

# üîπ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤—Å—ñ—Ö –∫–æ–ª–æ–Ω–æ–∫ —É —á–∏—Å–ª–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç
df = df.apply(pd.to_numeric, errors='coerce')

# üîπ –í–∏–¥–∞–ª–µ–Ω–Ω—è –æ–±'—î–∫—Ç–Ω–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ (—è–∫—â–æ –∑–∞–ª–∏—à–∏–ª–∏—Å—è)
df_numeric = df.select_dtypes(include=[np.number])

# üîπ –†–µ—Å–µ–º–ø–ª—ñ–Ω–≥ **–∑–∞–ª–∏—à–∞—î–º–æ –Ω–∞ 12-–≥–æ–¥–∏–Ω–Ω–æ–º—É —Ä—ñ–≤–Ω—ñ**
df_12h = df_numeric.resample('12h').mean()

# üîπ –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –æ–∑–Ω–∞–∫ —Ç–∞ —Ü—ñ–ª—å–æ–≤–æ—ó –∑–º—ñ–Ω–Ω–æ—ó
features = [
    "Temperature (¬∞C)", "Humidity (%)", "Occupancy Rate (%)",
    "Lighting Consumption (kWh)", "HVAC Consumption (kWh)",
    "Energy Price ($/kWh)", "Carbon Emission Rate (g CO2/kWh)",
    "Voltage Levels (V)", "Indoor Temperature (¬∞C)", "Building Age (years)",
    "Equipment Age (years)", "Energy Efficiency Rating", "Building Size (m¬≤)",
    "Window-to-Wall Ratio (%)", "Insulation Quality Score", 
    "Historical Energy Consumption (kWh)", "Solar Irradiance (W/m¬≤)",
    "Smart Plug Usage (kWh)", "Water Usage (liters)"
]
target = "Energy Consumption (kWh) Normalized"

# üîπ –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å
df_12h = df_12h[[target] + features].dropna()

# üîπ –ú–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è –æ–∑–Ω–∞–∫
scaler = StandardScaler()
df_12h[features] = scaler.fit_transform(df_12h[features])

# üîπ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ü—ñ–æ–Ω–∞—Ä–Ω–æ—Å—Ç—ñ
result = adfuller(df_12h[target])
print("ADF Statistic:", result[0])
print("p-value:", result[1])

# üîπ –î–∏—Ñ–µ—Ä–µ–Ω—Ü—ñ—é–≤–∞–Ω–Ω—è, —è–∫—â–æ —Ä—è–¥ –Ω–µ—Å—Ç–∞—Ü—ñ–æ–Ω–∞—Ä–Ω–∏–π
if result[1] > 0.05:
    df_12h[target] = df_12h[target].diff().dropna()
    df_12h = df_12h.dropna()

# üîπ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—Ç–æ—Ç–∏ —ñ–Ω–¥–µ–∫—Å—É (12 –≥–æ–¥–∏–Ω)
df_12h = df_12h.asfreq('12h')

# üîπ –ü–æ–¥—ñ–ª –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω—ñ —Ç–∞ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ (80/20)
train_size = int(len(df_12h) * 0.8)
train, test = df_12h.iloc[:train_size], df_12h.iloc[train_size:]

# üîπ –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –º–æ–¥–µ–ª—ñ SARIMAX
order = (1, 1, 1)  # –ê–≤—Ç–æ—Ä–µ–≥—Ä–µ—Å—ñ—è, –¥–∏—Ñ–µ—Ä–µ–Ω—Ü—ñ—é–≤–∞–Ω–Ω—è, MA
seasonal_order = (1, 1, 1, 14)  # –¢–∏–∂–Ω–µ–≤–∞ —Å–µ–∑–æ–Ω–Ω—ñ—Å—Ç—å (14 —Ç–æ—á–æ–∫ = 7 –¥–Ω—ñ–≤ –ø–æ 12H)

# üîπ –ü–æ–±—É–¥–æ–≤–∞ –º–æ–¥–µ–ª—ñ
model = SARIMAX(
    train[target], 
    exog=train[features],  
    order=order, 
    seasonal_order=seasonal_order,
    enforce_stationarity=False, 
    enforce_invertibility=False
)
model_fit = model.fit()

# üîπ –§—É–Ω–∫—Ü—ñ—è –¥–ª—è **—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è** –Ω–∞ 30 –¥–Ω—ñ–≤ (~60 —Ç–æ—á–æ–∫)
def recursive_forecast(model_fit, test_exog, steps=60):
    forecast = []
    last_data = test_exog.iloc[:1]  # –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –µ–∫–∑–æ–≥–µ–Ω–Ω–∏–π –≤–µ–∫—Ç–æ—Ä

    for i in range(steps):
        fc = model_fit.get_forecast(steps=1, exog=last_data).predicted_mean
        forecast.append(fc.iloc[0])

        # –û–Ω–æ–≤–ª—é—î–º–æ –µ–∫–∑–æ–≥–µ–Ω–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É
        last_data = test_exog.iloc[i+1:i+2] if i+1 < len(test_exog) else last_data

    return pd.Series(forecast, index=test_exog.index[:steps])

# üîπ –í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –Ω–∞ 60 —Ç–æ—á–æ–∫ (~30 –¥–Ω—ñ–≤)
forecast_values = recursive_forecast(model_fit, test[features], steps=60)

# üîπ –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–≥–Ω–æ–∑—É
plt.figure(figsize=(12, 6))
plt.plot(train.index[-100:], train[target].iloc[-100:], label="–¢—Ä–µ–Ω—É–≤–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ")
plt.plot(test.index[:60], test[target][:60], label="–†–µ–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è (30 –¥–Ω—ñ–≤)")
plt.plot(test.index[:60], forecast_values, label="–ü—Ä–æ–≥–Ω–æ–∑", linestyle="--")
plt.legend()
plt.title("–ü—Ä–æ–≥–Ω–æ–∑ –µ–Ω–µ—Ä–≥–æ—Å–ø–æ–∂–∏–≤–∞–Ω–Ω—è –Ω–∞ 30 –¥–Ω—ñ–≤ (SARIMAX)")
plt.show()

# üîπ –û—Ü—ñ–Ω–∫–∞ —è–∫–æ—Å—Ç—ñ –ø—Ä–æ–≥–Ω–æ–∑—É
print("MAE:", mean_absolute_error(test[target][:60], forecast_values))
print("RMSE:", np.sqrt(mean_squared_error(test[target][:60], forecast_values)))